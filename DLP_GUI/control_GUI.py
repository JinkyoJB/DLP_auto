# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DLP_GUI3.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from android import *
from DLP_program import *
from common_func import *


class Ui_MainWindow(object):
    def picture(self):
        try:
            android_picture()
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 안드로이드 촬영 완료")
            self.repaint()
        except:
            pass

    def port_open(self):
        try:
            global ser
            ser = serial.Serial(self.port_text.text(), 9600, timeout=0.5)
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: Arduino connected")
            self.repaint()

        except serial.SerialException as e:
             self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: {e}")
             self.repaint()

    def port_close(self):
        try:
            ser.close()
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: Arduino disconnected")
            self.repaint()
        except:
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: Arduino close error")
            self.repaint()

    def communication(self, msg):
        try:
            exitcode = b'*\r\n'
            list = []
            split_list = re.split(',', msg)

            if split_list[0] == '7':
                if split_list[1] == '0':
                    self.func_print_box.append(f'블레이드 모터 뒤로 {int(split_list[2]) * 0.00125}mm 이동')
                elif split_list[1] == '1':
                    self.func_print_box.append(f'블레이드 모터 앞으로 {int(split_list[2]) * 0.00125}mm 이동')
                else:
                    pass

            elif split_list[0] == '8':
                if split_list[1] == '0':
                    self.func_print_box.append(f'z축 모터 아래로 {int(split_list[2]) * 0.00125}mm 이동')
                elif split_list[1] == '1':
                    self.func_print_box.append(f'z축 모터 위로 {int(split_list[2]) * 0.00125}mm 이동')
                else:
                    pass

            elif split_list[0] == '9':
                if split_list[1] == '0':
                    self.func_print_box.append(f'피스톤 모터 우측으로 {int(split_list[2]) * 0.005}mm 이동')
                elif split_list[1] == '1':
                    self.func_print_box.append(f'피스톤 모터 좌측으로 {int(split_list[2]) * 0.005}mm 이동')
                else:
                    pass

            elif split_list[0] == '0'and split_list[1] == '0' and split_list[2] == '1':
                self.func_print_box.append(f'z축 limit 닿기')

            elif split_list[0] == '0'and split_list[1] == '1' and split_list[2] == '1':
                self.func_print_box.append(f'블레이드 limit 닿기')

            elif split_list[0] == '0'and split_list[1] == '0' and split_list[2] == '3':
                self.func_print_box.append(f'주사기 모터 버튼까지 이동')

            elif split_list[0] == '0'and split_list[1] == '1' and split_list[2] == '2':
                self.func_print_box.append(f'블레이드 일정거리 뒤로 이동')

            else:
                self.func_print_box.append(msg)
            self.repaint()

            ser.reset_input_buffer()
            ser.reset_output_buffer()
            ser.write(msg.encode())

            while True:
                self.data = ser.readline()
                if self.data != b'':
                    list.append(self.data)
                    if exitcode in list:
                        self.func_print_box.append(f"{time.strftime('%y-%m-%d %H:%M:%S')}: done")
                        self.repaint()
                        return
        except:
            pass

    def man_serial_send(self):
        try:
            msg = self.man_serial_text.text()
            self.communication(msg)
        except:
            pass

    def buffer_reset(self):
        try:
            ser.reset_input_buffer()
            ser.reset_output_buffer()
            self.func_print_box.append(f"{time.strftime('%y-%m-%d %H:%M:%S')}:buffer reset")
        except:
            pass

    def motor_init(self):
        try:
            self.communication('0,0,1')
            self.communication('0,1,1')
            self.communication('0,1,2')
            self.communication('8,1,24100')
            self.communication('0,0,3')
        except:
            pass

    def clear_updown(self):
        try:
            self.communication('8,0,20000')
            self.com = pag.alert(text='청소다함??', title='올렷다 내리기', button='OK')
            if self.com == 'OK':
                self.communication('8,1,20000')
        except:
            pass

    def first_layer(self):
        address = self.auto_first_add_text.text().replace('\\', '/')
        file_num = int(self.auto_first_file_text.text())
        dlp_time = float(self.auto_first_time_text.text())
        light_count = int(self.auto_first_light_num_text.text())
        num = 0
        i = 1

        while i <= int(self.auto_first_repeat_text.text()):
            self.communication('8,0,6400')  # 베드 하강 6400
            self.com = pag.alert(text='서포터레진 다 뿌리셨나요?', title='서포터레진 기다리는중', button='OK')
            if self.com == 'OK':
                self.communication('0,1,1')  # 블레이드 전진
                self.communication('8,1,6400')  # 베드 상승
                self.communication('0,1,2')  # 블레이딩
                sel = pag.confirm(text=f"도포상태 괜찮습니까?", title="재블레이딩안내", buttons=['네', '아뇨,재블레이딩', '취소'])
                if sel == '네':
                    for n in range(light_count):
                        image(address, file_num + num, dlp_time)
                        time.sleep(1)
                        num += 1
                        n += 1

                elif sel == '아뇨,재블레이딩':
                    continue
                else:
                    break

            i += 1
        self.func_print_box.append(f"{time.strftime('%y-%m-%d %H:%M:%S')}:첫층 공정완료")

    def support_layer(self):
        address = self.auto_supp_add_text.text().replace('\\', '/')
        file_num = int(self.auto_supp_file_text.text())
        dlp_time = float(self.auto_supp_time_text.text())
        light_count = int(self.auto_supp_light_num_text.text())
        thickness = int(float(self.auto_supp_thick_text.text())/0.00125)
        num = 0
        i = 1
        while i <= int(self.auto_supp_repeat_text.text()):
            self.communication(f'8,0,{6400+thickness}')  # 베드 하강 6400 + 두께
            com = pag.alert(text='서포터레진 다 뿌리셨나요?', title='서포터레진 기다리는중', button='OK')
            if com == 'OK':
                self.communication('0,1,1')  # 블레이드 전진
                self.communication('8,1,6400')  # 베드 상승
                self.communication('0,1,2')  # 블레이딩
                sel = pag.confirm(text=f"도포상태 괜찮습니까?", title="재블레이딩안내", buttons=['네', '아뇨,재블레이딩', '취소'])
                if sel == '네':
                    thickness = int(float(self.auto_supp_thick_text.text()) / 0.00125)
                    pass
                elif sel == '아뇨,재블레이딩':
                    thickness = 0
                    continue
                elif sel == '취소':
                    break
                for n in range(light_count):
                    image(address, file_num + num, dlp_time)
                    time.sleep(1)
                    num += 1
                    n += 1
            self.func_print_box.append(f"{time.strftime('%y-%m-%d %H:%M:%S')}: {i}번째 서포터 공정완료")
            self.repaint()
            i += 1

    def inject_move(self, length, thick):
        length_step = int(float(length)/0.005)  #기본95mm
        thickness = int(float(thick) / 0.00125)
        while True:
            self.communication('0,0,3')
            self.communication('9,0,30000')
            self.communication('9,0,5000')
            self.communication(f"5,5,{length_step}")
            self.communication('0,0,3')
            sel = pag.confirm(text=f"시료 주입하시겠습니까?", title="시료주입안내", buttons=['응,뿌려줘', '아니 괜춘'])
            if sel == '응,뿌려줘':
                continue
            elif sel == '아니 괜춘':
                break

        self.communication(f'8,0,{6400 + thickness}')  # 베드 하강 6400 + 두께
        self.communication('0,1,1')  # 블레이드 전진
        self.communication('8,1,6400')  # 베드 상승
        self.communication('0,1,2')  # 블레이딩

    def resin_layer(self):
        address = self.auto_resin_add_text.text().replace('\\', '/')
        file_num = int(self.auto_resin_file_text.text())
        dlp_time = float(self.auto_resin_time_text.text())
        light_count = int(self.auto_resin_light_num_text.text())
        length = float(self.auto_resin_len_text.text())
        num = 0
        i = 1
        resin_thick = self.auto_resin_thick_text.text()
        while i <= int(self.auto_resin_repeat_text.text()):
            self.inject_move(length, resin_thick)  # 베드 하강, 시료 주사, 블레이딩
            android_picture()
            time.sleep(2)
            sel = pag.confirm(text=f"도포상태 괜찮습니까?", title="재블레이딩안내", buttons=['네', '아뇨,재블레이딩', '취소'])
            if sel == '네':  # 광조사
                resin_thick = self.auto_resin_thick_text.text()
                pass

            elif sel == '아뇨,재블레이딩':
                resin_thick = 0
                continue

            elif sel == '공정멈춤':
                break

            for n in range(light_count):
                image(address, file_num + num, dlp_time)
                time.sleep(1)
                num += 1
                n += 1

            self.func_print_box.append(f"{time.strftime('%y-%m-%d %H:%M:%S')}: {i}번째 레진 공정완료")
            self.repaint()
            i = i+1
            
    def guide_address_input(self):
        address = self.guide_address_text.text().replace('\\', '/')
        value = cv_show(address, cv_x=604, cv_y=806)
        if value == None:
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 가이드 사진 주소 입력")
            self.repaint()
            return True
        else:
            pag.alert(text='사진주소 입력이 잘못되었어요, 확인해주세요', title='image input address error', button='OK')
            cv2.destroyAllWindows()
            return False

    def crop_input(self):
        try:
            address = self.guide_address_text.text().replace('\\', '/')
            img = cv2.imread(address)
            y = int(self.guide_y_text.text())
            yh = int(self.guide_yh_text.text())
            x = int(self.guide_x_text.text())
            xw = int(self.guide_xw_text.text())
            crop_img = img[y:yh, x:xw]
            cv_show(crop_img, cv_x=550, cv_y=300)

            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 크롭사이즈 입력")
            self.repaint()

        except:
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 크롭사이즈 입력 불량")
            self.repaint()

    def contour_input(self):
        try:
            pro = processing(guide_address=self.guide_address_text.text(),
                             y=int(self.guide_y_text.text()),
                             yh=int(self.guide_yh_text.text()),
                             x=int(self.guide_x_text.text()),
                             xw=int(self.guide_xw_text.text()),
                             thresh=float(self.threshold_text.text()),
                             max_area=int(self.contour_max_area_text.text()))
            self.contour_num_box.append(f"{pro.contour_show()}")
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: contour입력")
            self.repaint()
        except:
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: contour입력 불량")
            self.repaint()

    def preprocess_fix(self):
        try:
            global guide_address
            global y
            global yh
            global x
            global xw
            global thresh
            global max_area

            guide_address = self.guide_address_text.text()
            y = int(self.guide_y_text.text())
            yh = int(self.guide_yh_text.text())
            x = int(self.guide_x_text.text())
            xw = int(self.guide_xw_text.text())
            thresh = float(self.threshold_text.text())
            max_area = int(self.contour_max_area_text.text())

            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: preprocess_fix")
            self.repaint()

        except:
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: contour확정 불량")
            self.repaint()

    def AI_resin_layer(self):
        g_dict = globals()
        if 'thresh' in g_dict:
            pro = processing(guide_address=guide_address, y=y, yh=yh, x=x, xw=xw, thresh=thresh, max_area=max_area)

            address = self.auto_resin_add_text.text().replace('\\', '/')
            file_num = int(self.auto_resin_file_text.text())
            dlp_time = float(self.auto_resin_time_text.text())
            light_count = int(self.auto_resin_light_num_text.text())
            length = float(self.auto_resin_len_text.text())
            num = 0
            i = 1
            resin_thick = self.auto_resin_thick_text.text()

            while i <= int(self.auto_resin_repeat_text.text()):
                self.inject_move(length, resin_thick)  # 베드 하강, 시료 주사, 블레이딩
                android_picture()
                time.sleep(2)
                pic_list = pro.lastpic_cropping()
                class_value = np.array(classify(pic_list))

                self.func_print_box.append(class_value)
                self.repaint()

                normal = (class_value == 'normal').sum()
                pore = (class_value == 'pore').sum()
                critical = (class_value == 'critical').sum()
                error = (class_value == 'error').sum()
                minor_defect = (class_value == 'minor_defect').sum()
                value = error + minor_defect + critical

                if value != 0:
                    resin_thick = self.auto_resin_thick_text.text()
                    pass
                else:
                    sel = pag.confirm(text=f"{len(class_value)}중 normal:{normal}, pore:{pore}, error:{error}, critical:{critical}, minor_defect: {minor_defect} 의 불량이 나왔습니다. 재블레이딩 하시겠습니까?",title="재블레이딩안내", buttons=['재블레이딩', '무시하고 광조사', '공정멈춤'])
                    if sel == '재블레이딩':
                        resin_thick = 0
                        continue
                    elif sel == '네':  # 광조사
                        resin_thick = self.auto_resin_thick_text.text()
                        pass
                    else:
                        break

                for n in range(light_count):
                    image(address, file_num + num, dlp_time)
                    time.sleep(1)
                    num += 1
                    n += 1

                self.func_print_box.append(f"{time.strftime('%y-%m-%d %H:%M:%S')}: {i}번째 레진 공정완료")
                self.repaint()
                i = i+1
        else:
            pag.alert(text='전처리 설정을 확인해주세요.', title='전처리 설정을 확인 요청', button='OK')

    def develop_on(self):
        try:
            android_develop()
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 안드로이드 개발자모드 on")
            self.repaint()
        except:
            pass

    def display_on(self):
        try:
            android_display()
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 안드로이드 디스플레이 on")
            self.repaint()
        except:
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 폰연결 확인해주세요")
            self.repaint()

    def last_picture_call(self):
        try:
            self.last_address = last_picture()
            self.last_address_box.append(self.last_address)
            self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: 최근사진 저장 완료")
            self.repaint()
        except:
            pass

    def dlp_on(self):
        address = self.dlp_add_text.text().replace('\\', '/')
        pic_num = int(self.dlp_pic_num_text.text())
        dlp_time = float(self.dlp_time_text.text())
        image(address, pic_num, dlp_time)
        self.func_print_box.append(f"{time.strftime('%H:%M:%S')}: {dlp_time}초 노광")
        self.repaint()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(897, 783)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.guide_crop_line = QtWidgets.QFrame(self.centralwidget)
        self.guide_crop_line.setGeometry(QtCore.QRect(10, 170, 571, 21))
        self.guide_crop_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.guide_crop_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.guide_crop_line.setObjectName("guide_crop_line")
        self.android_label = QtWidgets.QLabel(self.centralwidget)
        self.android_label.setGeometry(QtCore.QRect(240, 10, 111, 16))
        self.android_label.setObjectName("android_label")
        self.develop_button = QtWidgets.QPushButton(self.centralwidget)
        self.develop_button.setGeometry(QtCore.QRect(20, 30, 120, 50))
        self.develop_button.setObjectName("develop_button")
        self.display_button = QtWidgets.QPushButton(self.centralwidget)
        self.display_button.setGeometry(QtCore.QRect(160, 30, 120, 50))
        self.display_button.setObjectName("display_button")
        self.guideadd_label = QtWidgets.QLabel(self.centralwidget)
        self.guideadd_label.setGeometry(QtCore.QRect(250, 130, 111, 16))
        self.guideadd_label.setObjectName("guideadd_label")
        self.last_call_button = QtWidgets.QPushButton(self.centralwidget)
        self.last_call_button.setGeometry(QtCore.QRect(300, 30, 120, 50))
        self.last_call_button.setObjectName("last_call_button")
        self.last_address_box = QtWidgets.QTextBrowser(self.centralwidget)
        self.last_address_box.setGeometry(QtCore.QRect(130, 90, 451, 21))
        self.last_address_box.setObjectName("last_address_box")
        self.last_address_label = QtWidgets.QLabel(self.centralwidget)
        self.last_address_label.setGeometry(QtCore.QRect(30, 90, 101, 31))
        self.last_address_label.setObjectName("last_address_label")
        self.guide_address_label = QtWidgets.QLabel(self.centralwidget)
        self.guide_address_label.setGeometry(QtCore.QRect(10, 150, 101, 21))
        self.guide_address_label.setObjectName("guide_address_label")

        self.guide_address_text = QtWidgets.QLineEdit(self.centralwidget)
        self.guide_address_text.setGeometry(QtCore.QRect(120, 150, 411, 16))
        self.guide_address_text.setObjectName("guide_address_text")
        self.guide_address_text.setText("./DLP_temp/")

        self.crop_label = QtWidgets.QLabel(self.centralwidget)
        self.crop_label.setGeometry(QtCore.QRect(20, 190, 71, 20))
        self.crop_label.setObjectName("crop_label")
        self.y_label = QtWidgets.QLabel(self.centralwidget)
        self.y_label.setGeometry(QtCore.QRect(100, 190, 21, 16))
        self.y_label.setObjectName("y_label")
        self.yh_label = QtWidgets.QLabel(self.centralwidget)
        self.yh_label.setGeometry(QtCore.QRect(190, 190, 31, 20))
        self.yh_label.setObjectName("yh_label")
        self.x_label = QtWidgets.QLabel(self.centralwidget)
        self.x_label.setGeometry(QtCore.QRect(300, 190, 16, 20))
        self.x_label.setObjectName("x_label")
        self.xw_label = QtWidgets.QLabel(self.centralwidget)
        self.xw_label.setGeometry(QtCore.QRect(400, 190, 31, 20))
        self.xw_label.setObjectName("xw_label")

        self.guide_y_text = QtWidgets.QLineEdit(self.centralwidget)
        self.guide_y_text.setGeometry(QtCore.QRect(120, 190, 40, 20))
        self.guide_y_text.setObjectName("guide_y_text")
        self.guide_y_text.setText("0")

        self.guide_yh_text = QtWidgets.QLineEdit(self.centralwidget)
        self.guide_yh_text.setGeometry(QtCore.QRect(220, 190, 40, 20))
        self.guide_yh_text.setObjectName("guide_yh_text")
        self.guide_yh_text.setText("1400")

        self.guide_xw_text = QtWidgets.QLineEdit(self.centralwidget)
        self.guide_xw_text.setGeometry(QtCore.QRect(440, 190, 40, 20))
        self.guide_xw_text.setObjectName("guide_xw_text")
        self.guide_xw_text.setText("2800")

        self.guide_x_text = QtWidgets.QLineEdit(self.centralwidget)
        self.guide_x_text.setGeometry(QtCore.QRect(320, 190, 40, 20))
        self.guide_x_text.setObjectName("guide_x_text")
        self.guide_x_text.setText("100")

        self.lb_contour2 = QtWidgets.QLabel(self.centralwidget)
        self.lb_contour2.setGeometry(QtCore.QRect(130, 230, 61, 21))
        self.lb_contour2.setObjectName("lb_contour2")

        self.threshold_text = QtWidgets.QLineEdit(self.centralwidget)
        self.threshold_text.setGeometry(QtCore.QRect(200, 230, 41, 20))
        self.threshold_text.setObjectName("threshold_text")
        self.threshold_text.setText("1.2")

        self.and_pre_line = QtWidgets.QFrame(self.centralwidget)
        self.and_pre_line.setGeometry(QtCore.QRect(0, 110, 591, 20))
        self.and_pre_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.and_pre_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.and_pre_line.setObjectName("and_pre_line")
        self.crop_cont_line = QtWidgets.QFrame(self.centralwidget)
        self.crop_cont_line.setGeometry(QtCore.QRect(10, 210, 571, 20))
        self.crop_cont_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.crop_cont_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.crop_cont_line.setObjectName("crop_cont_line")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(200, 280, 56, 12))
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.lb_contour1 = QtWidgets.QLabel(self.centralwidget)
        self.lb_contour1.setGeometry(QtCore.QRect(10, 230, 111, 20))
        self.lb_contour1.setObjectName("lb_contour1")

        self.contour_max_area_text = QtWidgets.QLineEdit(self.centralwidget)
        self.contour_max_area_text.setGeometry(QtCore.QRect(320, 230, 71, 20))
        self.contour_max_area_text.setObjectName("contour_max_area_text")
        self.contour_max_area_text.setText("15000")

        self.lb_contour3 = QtWidgets.QLabel(self.centralwidget)
        self.lb_contour3.setGeometry(QtCore.QRect(250, 230, 71, 20))
        self.lb_contour3.setObjectName("lb_contour3")
        self.guide_address_button = QtWidgets.QPushButton(self.centralwidget)
        self.guide_address_button.setGeometry(QtCore.QRect(540, 150, 41, 23))
        self.guide_address_button.setObjectName("guide_address_button")
        self.crop_input_button = QtWidgets.QPushButton(self.centralwidget)
        self.crop_input_button.setGeometry(QtCore.QRect(540, 190, 41, 23))
        self.crop_input_button.setObjectName("crop_input_button")
        self.contour_text_button = QtWidgets.QPushButton(self.centralwidget)
        self.contour_text_button.setGeometry(QtCore.QRect(400, 230, 41, 23))
        self.contour_text_button.setObjectName("contour_text_button")

        self.contour_num_box = QtWidgets.QTextBrowser(self.centralwidget)
        self.contour_num_box.setGeometry(QtCore.QRect(150, 260, 291, 21))
        self.contour_num_box.setObjectName("contour_num_box")

        self.preprocess_fix_button = QtWidgets.QPushButton(self.centralwidget)
        self.preprocess_fix_button.setGeometry(QtCore.QRect(460, 230, 121, 51))
        self.preprocess_fix_button.setObjectName("preprocess_fix_button")
        self.arduino_label = QtWidgets.QLabel(self.centralwidget)
        self.arduino_label.setGeometry(QtCore.QRect(240, 300, 111, 16))
        self.arduino_label.setObjectName("arduino_label")
        self.port_label = QtWidgets.QLabel(self.centralwidget)
        self.port_label.setGeometry(QtCore.QRect(10, 330, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.port_label.setFont(font)
        self.port_label.setObjectName("port_label")

        self.port_text = QtWidgets.QLineEdit(self.centralwidget)
        self.port_text.setGeometry(QtCore.QRect(130, 319, 71, 31))
        self.port_text.setObjectName("port_text")
        self.port_text.setText("COM4")

        self.port_open_button = QtWidgets.QPushButton(self.centralwidget)
        self.port_open_button.setGeometry(QtCore.QRect(230, 320, 101, 31))
        self.port_open_button.setObjectName("port_open_button")
        self.port_close_button = QtWidgets.QPushButton(self.centralwidget)
        self.port_close_button.setGeometry(QtCore.QRect(350, 320, 101, 31))
        self.port_close_button.setObjectName("port_close_button")
        self.serial_notice_label = QtWidgets.QLabel(self.centralwidget)
        self.serial_notice_label.setGeometry(QtCore.QRect(10, 410, 871, 91))
        self.serial_notice_label.setObjectName("serial_notice_label")

        self.man_serial_text = QtWidgets.QLineEdit(self.centralwidget)
        self.man_serial_text.setGeometry(QtCore.QRect(180, 370, 231, 31))
        self.man_serial_text.setObjectName("man_serial_text")

        self.send_button = QtWidgets.QPushButton(self.centralwidget)
        self.send_button.setGeometry(QtCore.QRect(420, 370, 91, 31))
        self.send_button.setObjectName("send_button")
        self.man_ser_label = QtWidgets.QLabel(self.centralwidget)
        self.man_ser_label.setGeometry(QtCore.QRect(10, 380, 171, 21))
        self.man_ser_label.setObjectName("man_ser_label")
        self.buffer_reset_button = QtWidgets.QPushButton(self.centralwidget)
        self.buffer_reset_button.setGeometry(QtCore.QRect(470, 320, 101, 31))
        self.buffer_reset_button.setObjectName("buffer_reset_button")
        self.capture_button = QtWidgets.QPushButton(self.centralwidget)
        self.capture_button.setGeometry(QtCore.QRect(440, 30, 120, 50))
        self.capture_button.setObjectName("capture_button")
        self.notice_dlp_line = QtWidgets.QFrame(self.centralwidget)
        self.notice_dlp_line.setGeometry(QtCore.QRect(-10, 490, 921, 20))
        self.notice_dlp_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.notice_dlp_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.notice_dlp_line.setObjectName("notice_dlp_line")
        self.auto_add_label = QtWidgets.QLabel(self.centralwidget)
        self.auto_add_label.setGeometry(QtCore.QRect(10, 560, 101, 31))
        self.auto_add_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.auto_add_label.setObjectName("auto_add_label")

        self.auto_first_add_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_first_add_text.setGeometry(QtCore.QRect(120, 559, 161, 31))
        self.auto_first_add_text.setObjectName("auto_first_add_text")
        self.auto_first_add_text.setText("C:/Users/user/Desktop/jinkyo/all.slice")


        self.motor_init_button = QtWidgets.QPushButton(self.centralwidget)
        self.motor_init_button.setGeometry(QtCore.QRect(610, 350, 120, 50))
        self.motor_init_button.setObjectName("motor_init_button")
        self.clear_button = QtWidgets.QPushButton(self.centralwidget)
        self.clear_button.setGeometry(QtCore.QRect(750, 350, 120, 50))
        self.clear_button.setObjectName("clear_button")
        self.first_button = QtWidgets.QPushButton(self.centralwidget)
        self.first_button.setGeometry(QtCore.QRect(120, 740, 111, 31))
        self.first_button.setObjectName("first_button")
        self.support_thick_label = QtWidgets.QLabel(self.centralwidget)
        self.support_thick_label.setGeometry(QtCore.QRect(10, 660, 101, 20))
        self.support_thick_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.support_thick_label.setObjectName("support_thick_label")
        self.auto_light_num_label = QtWidgets.QLabel(self.centralwidget)
        self.auto_light_num_label.setGeometry(QtCore.QRect(10, 600, 101, 20))
        self.auto_light_num_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.auto_light_num_label.setObjectName("auto_light_num_label")

        self.auto_first_light_num_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_first_light_num_text.setGeometry(QtCore.QRect(120, 600, 51, 20))
        self.auto_first_light_num_text.setObjectName("auto_first_light_num_text")
        self.auto_first_light_num_text.setText("1")

        self.support_count_label = QtWidgets.QLabel(self.centralwidget)
        self.support_count_label.setGeometry(QtCore.QRect(10, 690, 101, 20))
        self.support_count_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.support_count_label.setObjectName("support_count_label")
        self.support_button = QtWidgets.QPushButton(self.centralwidget)
        self.support_button.setGeometry(QtCore.QRect(340, 740, 131, 31))
        self.support_button.setObjectName("support_button")
        self.resin_button = QtWidgets.QPushButton(self.centralwidget)
        self.resin_button.setGeometry(QtCore.QRect(600, 741, 131, 31))
        self.resin_button.setObjectName("resin_button")

        self.AI_resin_button = QtWidgets.QPushButton(self.centralwidget)
        self.AI_resin_button.setGeometry(QtCore.QRect(750, 741, 131, 31))
        self.AI_resin_button.setObjectName("AI_resin_button")

        self.auto_first_time_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_first_time_text.setGeometry(QtCore.QRect(120, 630, 51, 20))
        self.auto_first_time_text.setObjectName("auto_first_time_text")
        self.auto_first_time_text.setText("30")


        self.lb_resin4 = QtWidgets.QLabel(self.centralwidget)
        self.lb_resin4.setGeometry(QtCore.QRect(10, 720, 101, 20))
        self.lb_resin4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lb_resin4.setObjectName("lb_resin4")
        self.func_print_box = QtWidgets.QTextBrowser(self.centralwidget)
        self.func_print_box.setGeometry(QtCore.QRect(610, 40, 271, 301))
        self.func_print_box.setObjectName("func_print_box")
        self.func_print_label = QtWidgets.QLabel(self.centralwidget)
        self.func_print_label.setGeometry(QtCore.QRect(690, 10, 141, 16))
        self.func_print_label.setObjectName("func_print_label")
        self.contour_num_label = QtWidgets.QLabel(self.centralwidget)
        self.contour_num_label.setGeometry(QtCore.QRect(0, 260, 161, 20))
        self.contour_num_label.setObjectName("contour_num_label")
        self.mid_line = QtWidgets.QFrame(self.centralwidget)
        self.mid_line.setGeometry(QtCore.QRect(570, 0, 51, 411))
        self.mid_line.setFrameShape(QtWidgets.QFrame.VLine)
        self.mid_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.mid_line.setObjectName("mid_line")
        self.con_ard_line = QtWidgets.QFrame(self.centralwidget)
        self.con_ard_line.setGeometry(QtCore.QRect(0, 280, 591, 20))
        self.con_ard_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.con_ard_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.con_ard_line.setObjectName("con_ard_line")
        self.ard_man_line = QtWidgets.QFrame(self.centralwidget)
        self.ard_man_line.setGeometry(QtCore.QRect(20, 350, 561, 20))
        self.ard_man_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.ard_man_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.ard_man_line.setObjectName("ard_man_line")
        self.auto__label = QtWidgets.QLabel(self.centralwidget)
        self.auto__label.setGeometry(QtCore.QRect(10, 630, 101, 20))
        self.auto__label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.auto__label.setObjectName("auto__label")

        self.auto_first_repeat_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_first_repeat_text.setGeometry(QtCore.QRect(120, 690, 51, 20))
        self.auto_first_repeat_text.setObjectName("auto_first_repeat_text")
        self.auto_first_repeat_text.setText("1")

        self.DLP_control_label = QtWidgets.QLabel(self.centralwidget)
        self.DLP_control_label.setGeometry(QtCore.QRect(10, 510, 71, 20))
        self.DLP_control_label.setObjectName("DLP_control_label")

        self.dlp_add_text = QtWidgets.QLineEdit(self.centralwidget)
        self.dlp_add_text.setGeometry(QtCore.QRect(190, 500, 231, 31))
        self.dlp_add_text.setObjectName("dlp_add_text")

        self.dlp_add_label = QtWidgets.QLabel(self.centralwidget)
        self.dlp_add_label.setGeometry(QtCore.QRect(70, 500, 131, 41))
        self.dlp_add_label.setAlignment(QtCore.Qt.AlignCenter)
        self.dlp_add_label.setObjectName("dlp_add_label")

        self.dlp_on_button = QtWidgets.QPushButton(self.centralwidget)
        self.dlp_on_button.setGeometry(QtCore.QRect(700, 500, 81, 31))
        self.dlp_on_button.setObjectName("dlp_on_button")

        self.dlp_time_label = QtWidgets.QLabel(self.centralwidget)
        self.dlp_time_label.setGeometry(QtCore.QRect(560, 510, 81, 20))
        self.dlp_time_label.setAlignment(QtCore.Qt.AlignCenter)
        self.dlp_time_label.setObjectName("dlp_time_label")

        self.dlp_time_text = QtWidgets.QLineEdit(self.centralwidget)
        self.dlp_time_text.setGeometry(QtCore.QRect(640, 510, 51, 21))
        self.dlp_time_text.setObjectName("dlp_time_text")

        self.dlp_auto_line = QtWidgets.QFrame(self.centralwidget)
        self.dlp_auto_line.setGeometry(QtCore.QRect(0, 530, 911, 16))
        self.dlp_auto_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.dlp_auto_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.dlp_auto_line.setObjectName("dlp_auto_line")

        self.auto_label = QtWidgets.QLabel(self.centralwidget)
        self.auto_label.setGeometry(QtCore.QRect(370, 540, 121, 20))
        self.auto_label.setObjectName("auto_label")

        self.auto_line1 = QtWidgets.QFrame(self.centralwidget)
        self.auto_line1.setGeometry(QtCore.QRect(10, 590, 881, 16))
        self.auto_line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.auto_line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.auto_line1.setObjectName("auto_line1")

        self.auto_line2 = QtWidgets.QFrame(self.centralwidget)
        self.auto_line2.setGeometry(QtCore.QRect(10, 620, 881, 16))
        self.auto_line2.setFrameShape(QtWidgets.QFrame.HLine)
        self.auto_line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.auto_line2.setObjectName("auto_line2")

        self.auto_line3 = QtWidgets.QFrame(self.centralwidget)
        self.auto_line3.setGeometry(QtCore.QRect(10, 650, 881, 16))
        self.auto_line3.setFrameShape(QtWidgets.QFrame.HLine)
        self.auto_line3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.auto_line3.setObjectName("auto_line3")

        self.auto_line4 = QtWidgets.QFrame(self.centralwidget)
        self.auto_line4.setGeometry(QtCore.QRect(0, 680, 881, 16))
        self.auto_line4.setFrameShape(QtWidgets.QFrame.HLine)
        self.auto_line4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.auto_line4.setObjectName("auto_line4")

        self.first_support_line_7 = QtWidgets.QFrame(self.centralwidget)
        self.first_support_line_7.setGeometry(QtCore.QRect(10, 710, 881, 16))
        self.first_support_line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.first_support_line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.first_support_line_7.setObjectName("first_support_line_7")

        self.auto_supp_time_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_supp_time_text.setGeometry(QtCore.QRect(340, 630, 51, 20))
        self.auto_supp_time_text.setObjectName("auto_supp_time_text")
        self.auto_supp_time_text.setText("5")


        self.auto_supp_add_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_supp_add_text.setGeometry(QtCore.QRect(340, 559, 201, 31))
        self.auto_supp_add_text.setObjectName("auto_supp_add_text")
        self.auto_supp_add_text.setText("C:/Users/user/Desktop/jinkyo/all.slice")

        self.auto_supp_thick_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_supp_thick_text.setGeometry(QtCore.QRect(340, 660, 51, 20))
        self.auto_supp_thick_text.setObjectName("auto_supp_thick_text")
        self.auto_supp_thick_text.setText("0.3")


        self.auto_supp_repeat_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_supp_repeat_text.setGeometry(QtCore.QRect(340, 690, 51, 20))
        self.auto_supp_repeat_text.setObjectName("auto_supp_repeat_text")
        self.auto_supp_repeat_text.setText("1")


        self.auto_supp_light_num_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_supp_light_num_text.setGeometry(QtCore.QRect(340, 600, 51, 20))
        self.auto_supp_light_num_text.setObjectName("auto_supp_light_num_text")
        self.auto_supp_light_num_text.setText("1")

        self.auto_resin_time_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_time_text.setGeometry(QtCore.QRect(600, 631, 51, 20))
        self.auto_resin_time_text.setObjectName("auto_resin_time_text")
        self.auto_resin_time_text.setText("1")

        self.auto_resin_len_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_len_text.setGeometry(QtCore.QRect(600, 721, 51, 20))
        self.auto_resin_len_text.setObjectName("auto_resin_len_text")
        self.auto_resin_len_text.setText("95")

        self.auto_resin_repeat_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_repeat_text.setGeometry(QtCore.QRect(600, 691, 51, 20))
        self.auto_resin_repeat_text.setObjectName("auto_resin_repeat_text")
        self.auto_resin_repeat_text.setText("1")

        self.auto_resin_thick_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_thick_text.setGeometry(QtCore.QRect(600, 661, 51, 20))
        self.auto_resin_thick_text.setObjectName("auto_resin_thick_text")
        self.auto_resin_thick_text.setText("0.05")

        self.auto_resin_add_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_add_text.setGeometry(QtCore.QRect(600, 560, 201, 31))
        self.auto_resin_add_text.setObjectName("auto_resin_add_text")
        self.auto_resin_add_text.setText("C:/Users/user/Desktop/jinkyo/ractangle.slice")

        self.auto_resin_light_num_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_light_num_text.setGeometry(QtCore.QRect(600, 601, 51, 20))
        self.auto_resin_light_num_text.setObjectName("auto_resin_light_num_text")
        self.auto_resin_light_num_text.setText("1")

        self.auto_resin_file_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_resin_file_text.setGeometry(QtCore.QRect(810, 570, 31, 21))
        self.auto_resin_file_text.setObjectName("auto_resin_file_text")
        self.auto_resin_file_text.setText("0")

        self.dlp__pic_num_label = QtWidgets.QLabel(self.centralwidget)
        self.dlp__pic_num_label.setGeometry(QtCore.QRect(430, 510, 61, 20))
        self.dlp__pic_num_label.setAlignment(QtCore.Qt.AlignCenter)
        self.dlp__pic_num_label.setObjectName("dlp__pic_num_label")

        self.dlp_pic_num_text = QtWidgets.QLineEdit(self.centralwidget)
        self.dlp_pic_num_text.setGeometry(QtCore.QRect(500, 510, 51, 21))
        self.dlp_pic_num_text.setObjectName("dlp_pic_num_text")
        self.auto_first_file_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_first_file_text.setGeometry(QtCore.QRect(290, 570, 31, 21))
        self.auto_first_file_text.setObjectName("auto_first_file_text")
        self.auto_first_file_text.setText("0")

        self.auto_supp_file_text = QtWidgets.QLineEdit(self.centralwidget)
        self.auto_supp_file_text.setGeometry(QtCore.QRect(550, 570, 31, 21))
        self.auto_supp_file_text.setObjectName("auto_supp_file_text")
        self.auto_supp_file_text.setText("0")

        self.dlp_auto_line.raise_()
        self.guide_crop_line.raise_()
        self.android_label.raise_()
        self.develop_button.raise_()
        self.display_button.raise_()
        self.guideadd_label.raise_()
        self.last_call_button.raise_()
        self.last_address_box.raise_()
        self.last_address_label.raise_()
        self.guide_address_label.raise_()
        self.guide_address_text.raise_()
        self.crop_label.raise_()
        self.y_label.raise_()
        self.yh_label.raise_()
        self.x_label.raise_()
        self.xw_label.raise_()
        self.guide_y_text.raise_()
        self.guide_yh_text.raise_()
        self.guide_xw_text.raise_()
        self.guide_x_text.raise_()
        self.lb_contour2.raise_()
        self.threshold_text.raise_()
        self.and_pre_line.raise_()
        self.crop_cont_line.raise_()
        self.label_16.raise_()
        self.lb_contour1.raise_()
        self.contour_max_area_text.raise_()
        self.lb_contour3.raise_()
        self.guide_address_button.raise_()
        self.crop_input_button.raise_()
        self.contour_text_button.raise_()
        self.contour_num_box.raise_()
        self.preprocess_fix_button.raise_()
        self.arduino_label.raise_()
        self.port_label.raise_()
        self.port_text.raise_()
        self.port_open_button.raise_()
        self.port_close_button.raise_()
        self.serial_notice_label.raise_()
        self.man_serial_text.raise_()
        self.send_button.raise_()
        self.man_ser_label.raise_()
        self.buffer_reset_button.raise_()
        self.capture_button.raise_()
        self.notice_dlp_line.raise_()
        self.auto_add_label.raise_()
        self.auto_first_add_text.raise_()
        self.motor_init_button.raise_()
        self.clear_button.raise_()
        self.first_button.raise_()
        self.support_thick_label.raise_()
        self.auto_light_num_label.raise_()
        self.auto_first_light_num_text.raise_()
        self.support_count_label.raise_()
        self.support_button.raise_()
        self.resin_button.raise_()
        self.AI_resin_button.raise_()
        self.auto_first_time_text.raise_()
        self.lb_resin4.raise_()
        self.func_print_box.raise_()
        self.func_print_label.raise_()
        self.contour_num_label.raise_()
        self.mid_line.raise_()
        self.con_ard_line.raise_()
        self.ard_man_line.raise_()
        self.auto__label.raise_()
        self.auto_first_repeat_text.raise_()
        self.DLP_control_label.raise_()
        self.dlp_add_text.raise_()
        self.dlp_add_label.raise_()
        self.dlp_on_button.raise_()
        self.dlp_time_label.raise_()
        self.dlp_time_text.raise_()
        self.auto_label.raise_()
        self.auto_line1.raise_()
        self.auto_line2.raise_()
        self.auto_line3.raise_()
        self.auto_line4.raise_()
        self.first_support_line_7.raise_()
        self.auto_supp_time_text.raise_()
        self.auto_supp_add_text.raise_()
        self.auto_supp_thick_text.raise_()
        self.auto_supp_repeat_text.raise_()
        self.auto_supp_light_num_text.raise_()
        self.auto_resin_time_text.raise_()
        self.auto_resin_len_text.raise_()
        self.auto_resin_repeat_text.raise_()
        self.auto_resin_thick_text.raise_()
        self.auto_resin_add_text.raise_()
        self.auto_resin_light_num_text.raise_()
        self.dlp__pic_num_label.raise_()
        self.dlp_pic_num_text.raise_()
        self.auto_first_file_text.raise_()
        self.auto_supp_file_text.raise_()
        self.auto_resin_file_text.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.capture_button.clicked.connect(MainWindow.picture) # type: ignore
        self.crop_input_button.clicked.connect(MainWindow.crop_input) # type: ignore
        self.preprocess_fix_button.clicked.connect(MainWindow.preprocess_fix) # type: ignore
        self.port_open_button.clicked.connect(MainWindow.port_open) # type: ignore
        self.port_close_button.clicked.connect(MainWindow.port_close) # type: ignore
        self.send_button.clicked.connect(MainWindow.man_serial_send) # type: ignore
        self.buffer_reset_button.clicked.connect(MainWindow.buffer_reset) # type: ignore
        self.motor_init_button.clicked.connect(MainWindow.motor_init) # type: ignore
        self.clear_button.clicked.connect(MainWindow.clear_updown) # type: ignore
        self.first_button.clicked.connect(MainWindow.first_layer) # type: ignore
        self.support_button.clicked.connect(MainWindow.support_layer) # type: ignore
        self.resin_button.clicked.connect(MainWindow.resin_layer) # type: ignore
        self.AI_resin_button.clicked.connect(MainWindow.AI_resin_layer)  # type: ignore
        self.develop_button.clicked.connect(MainWindow.develop_on) # type: ignore
        self.display_button.clicked.connect(MainWindow.display_on) # type: ignore
        self.last_call_button.clicked.connect(MainWindow.last_picture_call) # type: ignore
        self.guide_address_button.clicked.connect(MainWindow.guide_address_input) # type: ignore
        self.dlp_on_button.clicked.connect(MainWindow.dlp_on) # type: ignore
        self.contour_text_button.clicked.connect(MainWindow.contour_input) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.develop_button, self.display_button)
        MainWindow.setTabOrder(self.display_button, self.last_call_button)
        MainWindow.setTabOrder(self.last_call_button, self.last_address_box)
        MainWindow.setTabOrder(self.last_address_box, self.guide_address_text)
        MainWindow.setTabOrder(self.guide_address_text, self.guide_y_text)
        MainWindow.setTabOrder(self.guide_y_text, self.guide_yh_text)
        MainWindow.setTabOrder(self.guide_yh_text, self.guide_xw_text)
        MainWindow.setTabOrder(self.guide_xw_text, self.guide_x_text)
        MainWindow.setTabOrder(self.guide_x_text, self.threshold_text)
        MainWindow.setTabOrder(self.threshold_text, self.contour_max_area_text)
        MainWindow.setTabOrder(self.contour_max_area_text, self.guide_address_button)
        MainWindow.setTabOrder(self.guide_address_button, self.crop_input_button)
        MainWindow.setTabOrder(self.crop_input_button, self.contour_text_button)
        MainWindow.setTabOrder(self.contour_text_button, self.contour_num_box)
        MainWindow.setTabOrder(self.contour_num_box, self.preprocess_fix_button)
        MainWindow.setTabOrder(self.preprocess_fix_button, self.port_text)
        MainWindow.setTabOrder(self.port_text, self.port_open_button)
        MainWindow.setTabOrder(self.port_open_button, self.port_close_button)
        MainWindow.setTabOrder(self.port_close_button, self.man_serial_text)
        MainWindow.setTabOrder(self.man_serial_text, self.buffer_reset_button)
        MainWindow.setTabOrder(self.buffer_reset_button, self.capture_button)
        MainWindow.setTabOrder(self.capture_button, self.send_button)
        MainWindow.setTabOrder(self.send_button, self.auto_first_add_text)
        MainWindow.setTabOrder(self.auto_first_add_text, self.motor_init_button)
        MainWindow.setTabOrder(self.motor_init_button, self.clear_button)
        MainWindow.setTabOrder(self.clear_button, self.first_button)
        MainWindow.setTabOrder(self.first_button, self.auto_first_light_num_text)
        MainWindow.setTabOrder(self.auto_first_light_num_text, self.support_button)
        MainWindow.setTabOrder(self.support_button, self.resin_button)
        MainWindow.setTabOrder(self.resin_button, self.AI_resin_button)
        MainWindow.setTabOrder(self.AI_resin_button, self.auto_first_time_text)
        MainWindow.setTabOrder(self.auto_first_time_text, self.func_print_box)
        MainWindow.setTabOrder(self.func_print_box, self.auto_first_repeat_text)

        self.port_open()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.android_label.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">android 작동</span></p></body></html>"))
        self.develop_button.setText(_translate("MainWindow", "개발자 모드 on"))
        self.display_button.setText(_translate("MainWindow", "디스플레이 on"))
        self.guideadd_label.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">사진 전처리</span></p></body></html>"))
        self.last_call_button.setText(_translate("MainWindow", "최근사진 저장\n"
"&주소 불러오기"))
        self.last_address_label.setText(_translate("MainWindow", "<html><head/><body><p>최신사진 주소 :</p></body></html>"))
        self.guide_address_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">가이드사진 주소:</p></body></html>"))
        self.crop_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">crop 좌표:</p></body></html>"))
        self.y_label.setText(_translate("MainWindow", "Y:"))
        self.yh_label.setText(_translate("MainWindow", "Y+h:"))
        self.x_label.setText(_translate("MainWindow", "X:"))
        self.xw_label.setText(_translate("MainWindow", "X+w:"))
        self.lb_contour2.setText(_translate("MainWindow", "<html><head/><body><p>threshold:</p></body></html>"))
        self.lb_contour1.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">contours 만들기 :</span></p></body></html>"))
        self.lb_contour3.setText(_translate("MainWindow", "<html><head/><body><p>max_area:</p></body></html>"))
        self.guide_address_button.setText(_translate("MainWindow", "입력"))
        self.crop_input_button.setText(_translate("MainWindow", "입력"))
        self.contour_text_button.setText(_translate("MainWindow", "입력"))
        self.preprocess_fix_button.setText(_translate("MainWindow", "입력값 확정"))
        self.arduino_label.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">아두이노 제어</span></p></body></html>"))
        self.port_label.setText(_translate("MainWindow", "<html><head/><body><p>port (ex: COM16) :</p></body></html>"))
        self.port_open_button.setText(_translate("MainWindow", "port open"))
        self.port_close_button.setText(_translate("MainWindow", "port close"))
        self.serial_notice_label.setText(_translate("MainWindow", "\'0,0,1\' : z축 limit닿기 / \'0,1,1\' : b축 limit닿기 / \'0,0,3\' : 레진모터 버튼까지 이동 / \'0,1,2\' : b축 일정거리 뒤로 이동 \n"
"\'4,4,n\' : resinshoot (입력단위: 1초면 1000) Ex)1초샷: \'4,4,1000\' \'5,5,n\' : resin을 쏘면서 nstep만큼 이동(1cm -- 2000step) \n"
"\'7,0,n\' : 블레이드모터가 모터쪽으로 n step만큼 이동(1step당 0.00125mm) \'7,1,n\' : 블레이드모터가 앞쪽으로 n step만큼 이동(1step당 0.00125mm) \n"
"\'8,0,n\' : z축모터가 모터(아래)쪽으로 n step만큼 이동(1step당 0.00125mm) / \'8,1,n\' : z축모터가 위쪽으로 n step만큼 이동(1step당 0.00125mm) \n"
"\'9,0,n\' : 주사기 모터 좌측으로 n step만큼 이동(1step당 0.005mm) / \'9,1,n\' : 주사기 모터 우측으로 n step만큼 이동(1step당 0.005mm)"))
        self.send_button.setText(_translate("MainWindow", "통신 보내기"))
        self.man_ser_label.setText(_translate("MainWindow", "아두이노 수동 시리얼 통신 :"))
        self.buffer_reset_button.setText(_translate("MainWindow", "buffer reset"))
        self.capture_button.setText(_translate("MainWindow", "사진 찍기"))
        self.auto_add_label.setText(_translate("MainWindow", "노광이미지 주소:\n"
"파일번호:"))
        self.motor_init_button.setText(_translate("MainWindow", "장비 모터 \n"
"위치 초기화"))
        self.clear_button.setText(_translate("MainWindow", "청소용 일정위치\n"
"(step20000) 이동"))
        self.first_button.setText(_translate("MainWindow", "첫 층 출력 명령"))
        self.support_thick_label.setText(_translate("MainWindow", "thickness(mm) :"))
        self.auto_light_num_label.setText(_translate("MainWindow", "노광 횟수:"))
        self.support_count_label.setText(_translate("MainWindow", "반복 횟수(층) :"))
        self.support_button.setText(_translate("MainWindow", "서포트 출력 명령"))
        self.resin_button.setText(_translate("MainWindow", "레진 출력 명령"))
        self.AI_resin_button.setText(_translate("MainWindow", "AI모드 출력 명령"))
        self.lb_resin4.setText(_translate("MainWindow", "시료주입 길이:"))
        self.func_print_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">함수 출력내용</span></p></body></html>"))
        self.contour_num_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">검출된 contour 개수 :</span></p></body></html>"))
        self.auto__label.setText(_translate("MainWindow", "광조사 시간(s):"))
        self.DLP_control_label.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">DLP제어</span></p></body></html>"))
        self.dlp_add_label.setText(_translate("MainWindow", "노광이미지 주소:"))
        self.dlp_on_button.setText(_translate("MainWindow", "노광시작"))
        self.dlp_time_label.setText(_translate("MainWindow", "노광 시간(s):"))
        self.auto_label.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">자동반복출력</span></p></body></html>"))
        self.dlp__pic_num_label.setText(_translate("MainWindow", "파일번호:"))
